// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/ccnu/v1/ccnu.proto

package ccnuv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CCNUService_Login_FullMethodName        = "/ccnu.v1.CCNUService/Login"
	CCNUService_CourseList_FullMethodName   = "/ccnu.v1.CCNUService/CourseList"
	CCNUService_GetAllGrades_FullMethodName = "/ccnu.v1.CCNUService/GetAllGrades"
	CCNUService_GetGrades_FullMethodName    = "/ccnu.v1.CCNUService/GetGrades"
)

// CCNUServiceClient is the client API for CCNUService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CCNUServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	CourseList(ctx context.Context, in *CourseListRequest, opts ...grpc.CallOption) (*CourseListResponse, error)
	GetAllGrades(ctx context.Context, in *GetAllGradesRequest, opts ...grpc.CallOption) (*GetAllGradesResponse, error)
	GetGrades(ctx context.Context, in *GetGradesRequest, opts ...grpc.CallOption) (*GetGradesResponse, error)
}

type cCNUServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCCNUServiceClient(cc grpc.ClientConnInterface) CCNUServiceClient {
	return &cCNUServiceClient{cc}
}

func (c *cCNUServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, CCNUService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCNUServiceClient) CourseList(ctx context.Context, in *CourseListRequest, opts ...grpc.CallOption) (*CourseListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourseListResponse)
	err := c.cc.Invoke(ctx, CCNUService_CourseList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCNUServiceClient) GetAllGrades(ctx context.Context, in *GetAllGradesRequest, opts ...grpc.CallOption) (*GetAllGradesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllGradesResponse)
	err := c.cc.Invoke(ctx, CCNUService_GetAllGrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCNUServiceClient) GetGrades(ctx context.Context, in *GetGradesRequest, opts ...grpc.CallOption) (*GetGradesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradesResponse)
	err := c.cc.Invoke(ctx, CCNUService_GetGrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCNUServiceServer is the server API for CCNUService service.
// All implementations must embed UnimplementedCCNUServiceServer
// for forward compatibility
type CCNUServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	CourseList(context.Context, *CourseListRequest) (*CourseListResponse, error)
	GetAllGrades(context.Context, *GetAllGradesRequest) (*GetAllGradesResponse, error)
	GetGrades(context.Context, *GetGradesRequest) (*GetGradesResponse, error)
	mustEmbedUnimplementedCCNUServiceServer()
}

// UnimplementedCCNUServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCCNUServiceServer struct {
}

func (UnimplementedCCNUServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCCNUServiceServer) CourseList(context.Context, *CourseListRequest) (*CourseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CourseList not implemented")
}
func (UnimplementedCCNUServiceServer) GetAllGrades(context.Context, *GetAllGradesRequest) (*GetAllGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGrades not implemented")
}
func (UnimplementedCCNUServiceServer) GetGrades(context.Context, *GetGradesRequest) (*GetGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrades not implemented")
}
func (UnimplementedCCNUServiceServer) mustEmbedUnimplementedCCNUServiceServer() {}

// UnsafeCCNUServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CCNUServiceServer will
// result in compilation errors.
type UnsafeCCNUServiceServer interface {
	mustEmbedUnimplementedCCNUServiceServer()
}

func RegisterCCNUServiceServer(s grpc.ServiceRegistrar, srv CCNUServiceServer) {
	s.RegisterService(&CCNUService_ServiceDesc, srv)
}

func _CCNUService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCNUServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCNUService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCNUServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCNUService_CourseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCNUServiceServer).CourseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCNUService_CourseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCNUServiceServer).CourseList(ctx, req.(*CourseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCNUService_GetAllGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCNUServiceServer).GetAllGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCNUService_GetAllGrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCNUServiceServer).GetAllGrades(ctx, req.(*GetAllGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCNUService_GetGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCNUServiceServer).GetGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CCNUService_GetGrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCNUServiceServer).GetGrades(ctx, req.(*GetGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CCNUService_ServiceDesc is the grpc.ServiceDesc for CCNUService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CCNUService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ccnu.v1.CCNUService",
	HandlerType: (*CCNUServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CCNUService_Login_Handler,
		},
		{
			MethodName: "CourseList",
			Handler:    _CCNUService_CourseList_Handler,
		},
		{
			MethodName: "GetAllGrades",
			Handler:    _CCNUService_GetAllGrades_Handler,
		},
		{
			MethodName: "GetGrades",
			Handler:    _CCNUService_GetGrades_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ccnu/v1/ccnu.proto",
}
